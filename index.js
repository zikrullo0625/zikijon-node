const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

// üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!)
const TOKEN = '6166550816:AAFB8xm3sRUlHzBzfvTtaVcptMITxacP1vI';
const bot = new TelegramBot(TOKEN, { polling: true });

const KNOWLEDGE_FILE = 'knowledge.json';

let samples = [];
let labels = [];
let responses = {};
let trainingMode = {}; // { chatId: { input: '', state: 'awaiting_response' } }

// üß† –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞–Ω–∏–π
if (fs.existsSync(KNOWLEDGE_FILE)) {
    try {
        const data = JSON.parse(fs.readFileSync(KNOWLEDGE_FILE, 'utf-8'));
        if (data.samples && data.labels && data.responses) {
            samples = data.samples;
            labels = data.labels;
            responses = data.responses;
        }
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:", e.message);
    }
} else {
    samples = ['–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '–ø–æ–∫–∞'];
    labels = ['greeting', 'howareyou', 'goodbye'];
    responses = {
        greeting: '–ü—Ä–∏–≤–µ—Ç! üëã',
        howareyou: '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?',
        goodbye: '–ü–æ–∫–∞-–ø–æ–∫–∞!'
    };
}

// üîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function findMostSimilarSample(input, samples) {
    input = input.trim().toLowerCase();
    let bestMatch = null;
    let bestScore = -1;

    if (samples.includes(input)) return samples.indexOf(input);

    for (let i = 0; i < samples.length; i++) {
        const sample = samples[i].toLowerCase().trim();
        let score = 0;

        const inputWords = input.split(' ');
        const sampleWords = sample.split(' ');

        if (inputWords[0] === sampleWords[0]) score += 2;
        const commonWords = inputWords.filter(word => sampleWords.includes(word));
        score += commonWords.length;
        if (sample.includes(input) || input.includes(sample)) score += 1;

        if (score > bestScore) {
            bestScore = score;
            bestMatch = i;
        }
    }

    return { index: bestMatch, score: bestScore };
}

// üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const input = msg.text?.trim().toLowerCase();

    if (!input) return;

    // üéì –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    if (trainingMode[chatId] && trainingMode[chatId].state === 'awaiting_response') {
        const originalInput = trainingMode[chatId].input;
        const newLabel = `custom_${Object.keys(responses).length}`;
        responses[newLabel] = input;
        samples.push(originalInput);
        labels.push(newLabel);
        trainingMode[chatId] = null;

        // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–Ω–∏—è
        fs.writeFileSync(KNOWLEDGE_FILE, JSON.stringify({ samples, labels, responses }, null, 2));
        bot.sendMessage(chatId, 'ü§ñ –ó–∏–∫–∏“∑–æ–Ω: –†–∞—Ö–º–∞—Ç –±—Ä–∞—Ç, —ë–¥–∞–º–±–∞ –º–æ–Ω–¥–∞–º!');
        return;
    }

    // üîç –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞
    const match = findMostSimilarSample(input, samples);

    if (typeof match === 'number') {
        const label = labels[match];
        bot.sendMessage(chatId, responses[label] || 'ü§ñ ...');
        return;
    }

    if (match && match.score >= 2) {
        const label = labels[match.index];
        bot.sendMessage(chatId, responses[label] || 'ü§ñ ...');
        return;
    }

    // ü§∑‚Äç‚ôÇÔ∏è –ù–µ –ø–æ–Ω—è–ª ‚Äî –ø—Ä–æ—Å–∏–º –Ω–∞—É—á–∏—Ç—å
    bot.sendMessage(chatId, 'ü§ñ –ó–∏–∫–∏“∑–æ–Ω: –ú–∞–Ω —á–∏–∑–µ –≥—É–º –∞–∫—É–Ω –∏–∑ –≥–∞–ø–∞—Ç–±–∞?\n–ù–∞–≤–∏—Å —á–∞–≤–æ–±–∞—Ç.');
    trainingMode[chatId] = {
        input: input,
        state: 'awaiting_response'
    };
});
